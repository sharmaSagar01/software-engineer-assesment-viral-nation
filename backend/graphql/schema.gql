scalar DateTime

type User {
  id: Int!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  movies: [Movie!]
}

type Movie {
  id: Int!
  title: String!
  description: String
  directorName: String!
  releaseDate: DateTime!
  user: User!
}

type Query {
  profile: User
  users(
    limit: Int = 10 @constraint(min: 1, max: 100)
    offset: Int = 0 @constraint(min: 1)
  ): [User!]!
  movie(id: Int!): Movie
  movies(
    limit: Int = 10 @constraint(min: 1, max: 100)
    offset: Int = 0 @constraint(min: 1)
    contains: String
    releaseDate: DateRange
    orderBy: OrderBy = id
    sortOrder: SortOrder = asc
  ): [Movie!]!
}

type Mutation {
  register(
    name: String!
    email: String! @constraint(format: "email")
    password: String! @constraint(minLength: 8)
  ): User

  login(email: String!, password: String!): Login

  changePassword(
    oldPassword: String!
    newPassword: String! @constraint(minLength: 8)
  ): User

  createMovie(
    title: String!
    description: String
    directorName: String!
    releaseDate: DateTime!
  ): Movie

  updateMovie(
    id: Int!
    title: String
    description: String
    directorName: String
    releaseDate: DateTime
  ): Movie

  deleteMovie(id: Int!): Boolean
}

type Login {
  accessToken: String!
}

input DateRange {
  gte: DateTime
  lte: DateTime
}

enum SortOrder {
  asc
  desc
}

enum OrderBy {
  id
  directorName
  title
  description
  releaseDate
}
